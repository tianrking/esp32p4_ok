#include "my_ui.h"
#include "esp_log.h" // 用于日志输出

// 可以为你的UI模块定义一个TAG
static const char *TAG_MY_UI = "MY_UI";

// 你可以在这里定义静态的LVGL对象指针，如果需要在其他函数中访问它们
// static lv_obj_t *wifi_status_label;

void my_ui_init(void) {
    ESP_LOGI(TAG_MY_UI, "Initializing My Custom UI...");

    // 获取当前活动的屏幕 (通常是默认屏幕)
    lv_obj_t *scr = lv_scr_act();
    if (!scr) {
        ESP_LOGE(TAG_MY_UI, "Failed to get active screen!");
        return;
    }

    // 创建一个简单的标签
    lv_obj_t *label = lv_label_create(scr); // 父对象是当前屏幕
    if (!label) {
        ESP_LOGE(TAG_MY_UI, "Failed to create label!");
        return;
    }

    // 设置标签的文本
    lv_label_set_text(label, "Hello ESP32-S3!\nWi-Fi & LVGL Ready.");

    // 将标签居中对齐 (也可以使用 lv_obj_align_to 或 lv_obj_set_pos)
    lv_obj_center(label);

    ESP_LOGI(TAG_MY_UI, "Label created and centered.");

    // 如果需要，可以在这里创建更多UI元素或加载一个更复杂的屏幕
    // 例如，如果你想显示Wi-Fi状态：
    // wifi_status_label = lv_label_create(scr);
    // lv_obj_align(wifi_status_label, LV_ALIGN_BOTTOM_MID, 0, -10); // 底部中间
    // lv_label_set_text(wifi_status_label, "Wi-Fi: Connecting...");
}

// 如果你在my_ui.h中声明了其他函数，在这里实现它们
// void my_ui_update_wifi_status(bool connected) {
//     if (wifi_status_label) {
//         if (connected) {
//             lv_label_set_text(wifi_status_label, "Wi-Fi: Connected");
//             lv_obj_set_style_text_color(wifi_status_label, lv_color_hex(0x00FF00), LV_PART_MAIN); // 绿色
//         } else {
//             lv_label_set_text(wifi_status_label, "Wi-Fi: Disconnected");
//             lv_obj_set_style_text_color(wifi_status_label, lv_color_hex(0xFF0000), LV_PART_MAIN); // 红色
//         }
//     }
// }